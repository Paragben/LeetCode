5. Longest Palindromic Substring(Medium): Given a string s, return the longest palindromic substring in s.
    class Solution {
        public String longestPalindrome(String s) {
            String m ="";
            int longest = 0;
            for(int i=0;i<s.length();i++){
             // odd length
                int left =i;
                int right = i;
                while(left>=0 && right<s.length() && s.charAt(left)== s.charAt(right)){
                   if(right-left +1 > longest){
                       longest = right-left+1;
                       m = s.substring(left,right+1);
                   }
                    left--;
                    right++;
                }
            // even length
                left = i;
                right = i+1;
                  while(left>=0 && right<s.length() && s.charAt(left)== s.charAt(right)){
                   if(right-left +1 > longest){
                       longest = right-left+1;
                       m = s.substring(left,right+1);
                   }
                    left--;
                    right++;
                }
            }
            return m;
        }
    }
https://leetcode.com/problems/longest-palindromic-substring/submissions/953165656/

7. Reverse Integer(Medium): Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
        class Solution {
            public int reverse(int x) {
                int reverse=0;
                while(x != 0)   
                {  
                    int remainder = x % 10;  
                    reverse = reverse * 10 + remainder;  
                    x = x/10;  
                }  
                return reverse;
            }
        }
        
This test-values have invalid test cases for x:
1534236469, 1563847412 and -1563847412
Because all these numbers are within the required range [-2^31 ; 2^31 -1] 


2. AddTwoNumbers(Medium): You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. 
      class Solution {
          public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
              ListNode dummy=new ListNode(0);
              ListNode curr=dummy;
              int carry=0;

              while(l1 != null || l2 != null || carry == 1){
                  int sum = 0; 
                  if(l1 != null){ 
                      sum += l1.val;
                      l1 = l1.next;
                  }
                  if(l2 != null){ 
                      sum += l2.val;
                      l2 = l2.next;
                  }
                  sum += carry; 
                  carry = sum/10; 
                  ListNode node = new ListNode(sum % 10); 
                  curr.next = node; 
                  curr = curr.next; 
              }
              return dummy.next;Â 

          }
      }
      
Link to access my Solution:
https://leetcode.com/problems/add-two-numbers/submissions/952015827/ 

3. Longest Substring Without Repeating Characters(Medium): Given a string s, find the length of the longest substring without repeating characters.
 
      class Solution {
          public int lengthOfLongestSubstring(String s) {
              Set<Character>set=new HashSet<>();
              int maxLength=0;
              int left=0;
              for(int right=0;right<s.length();right++){

                  if(!set.contains(s.charAt(right))){
                      set.add(s.charAt(right));
                      maxLength=Math.max(maxLength,right-left+1);

                  }else{
                      while(s.charAt(left)!=s.charAt(right)){
                          set.remove(s.charAt(left));
                          left++;
                      }
                      set.remove(s.charAt(left));left++;
                      set.add(s.charAt(right));
                  }

              }
              return maxLength;
          }
      }
      
Link to access my Solution:
https://leetcode.com/problems/longest-substring-without-repeating-characters/submissions/952516919/ 

11. Container With Most Water(Medium): You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.

    class Solution {
        public int maxArea(int[] height) {
            int left = 0;
            int right = height.length - 1;
            int max = 0;
            while(left < right){
                int w = right - left;
                int h = Math.min(height[left], height[right]);
                int area = h * w;
                max = Math.max(max, area);
                if(height[left] < height[right]) left++;
                else if(height[left] > height[right]) right--;
                else {
                    left++;
                    right--;
                }
            }
            return max;
        }
    }
    

Link to access my Solution:
    https://leetcode.com/problems/container-with-most-water/submissions/954907465/
    
6. Zigzag Conversion(Medium): The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
And then read line by line: "PAHNAPLSIIGYIR"
        public class Solution {
            public String convert(String s, int numRows) {
                if (numRows == 1) {
                    return s;
                }
                StringBuilder result = new StringBuilder();
                int n = s.length();
                int cycleLen = 2 * numRows - 2;
                for (int i = 0; i < numRows; i++) {
                    for (int j = 0; j + i < n; j += cycleLen) {
                        result.append(s.charAt(j + i));
                        if (i != 0 && i != numRows - 1 && j + cycleLen - i < n) {
                            result.append(s.charAt(j + cycleLen - i));
                        }
                    }
                }
                return result.toString();
            }
        }
        
        
Link to access my Solution:
https://leetcode.com/problems/zigzag-conversion/submissions/954912265/

8. String to Integer (Medium): Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).
The algorithm for myAtoi(string s) is as follows:
Read in and ignore any leading whitespace.Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
Return the integer as the final result.

        class Solution {
            public int myAtoi(String s) {
                int sign=1; int result=0; int i=0; int n=s.length();
                while(i<n && s.charAt(i)==' ')
                    i++;

                if(i<n && s.charAt(i)=='+'){
                    sign=1;
                    i++;
                }
                else if(i<n && s.charAt(i)=='-'){
                    sign=-1;
                    i++;
                }
                while(i<n && 0<=(int)s.charAt(i)-'0' && (int)s.charAt(i)-'0'<=9 ){   
                    if(result>Integer.MAX_VALUE/10 || (result==Integer.MAX_VALUE/10 && (int)(s.charAt(i)-'0')>Integer.MAX_VALUE%10))
                    return result=(sign==1?Integer.MAX_VALUE:Integer.MIN_VALUE);
                    result*=10;
                    result+=((int)s.charAt(i)-'0');
                    i++;
                }
                return result*sign;
            }
}

https://leetcode.com/problems/string-to-integer-atoi/submissions/954917326/

75. Sort Colors(Medium): Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

class Solution {
    public void sortColors(int[] nums) {
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            System.out.println(nums[i]);
        }
    }
}
