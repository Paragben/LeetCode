4. Median of Two Sorted Arrays(Hard): Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. 
The overall run time complexity should be O(log (m+n)).
    class Solution {
        public double findMedianSortedArrays(int[] nums1, int[] nums2) {
            int x=nums1.length;
            int y=nums2.length;
            int[] c = new int[x+y]; 
            int sum=x+y;
            int a,b=0;
            a=sum/2;
            b=(sum/2)-1; 
            System.arraycopy(nums1, 0, c, 0, x);
            System.arraycopy(nums2, 0, c, x, y);

            Arrays.sort(c);

            double d;
            if(sum%2==0){
                d=(c[a]+c[b])/2.00;
            }
            else{
                d=c[a];
            }
        return d;
        }
    }
    
    Heres the Link to my solution:
    https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/952564695/
    
    
10. Regular Expression Matching(Hard): Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
'.' Matches any single character
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

        class Solution {
        public boolean isMatch(String s, String p) {
            return helper(0,0,s,p,new Boolean[s.length()][p.length()]);
        }
        public boolean helper(int index1,int index2, String s, String p, Boolean[][] dp) {
            if(index1>=s.length()|| index2>= p.length()) {
                if(index1>=s.length()&& index2>= p.length())
                    return true;
                else  if(index2+1<p.length() && p.charAt(index2+1)=='*')  {
                    return helper(index1, index2+2, s, p, dp);
                }

                    return false;

            }
            if(dp[index1][index2] != null)
                return dp[index1][index2];

            if(index2+1<p.length() && p.charAt(index2+1)=='*')
            {
                if(p.charAt(index2) == '.')
                {
                    return  dp[index1][index2] = helper(index1+1,index2,s,p,dp) || helper(index1,index2+2,s,p,dp);
                }
                else {
                    if(s.charAt(index1) == p.charAt(index2))    {
                       return dp[index1][index2] =helper(index1+1,index2,s,p,dp) || helper(index1,index2+2,s,p,dp); 
                    }
                    else {
                        return dp[index1][index2]=helper(index1,index2+2,s,p,dp);
                    }

                }
            }
            else {
                 if(s.charAt(index1) == p.charAt(index2))  {
                    return dp[index1][index2] =helper(index1+1,index2+1,s,p,dp); 
                 }
                 else if(p.charAt(index2) == '.')  {
                     return  dp[index1][index2] = helper(index1+1,index2+1,s,p,dp);
                 }
            }

            return false;
        }
        }
Heres the Link to my solution:
https://leetcode.com/problems/regular-expression-matching/submissions/953130006/

23. Merge k Sorted Lists(Hard):You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.
        class Solution {
            public ListNode mergeKLists(ListNode[] lists) {
                ListNode dummyHead = new ListNode();

                // try pq
                PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>((a, b) -> a.val - b.val);

                for (int i = 0; i < lists.length; i++) {
                    ListNode cp = lists[i];


                    while (cp != null) {    
                        pq.add(cp);
                        ListNode next = cp.next;
                        cp.next = null;
                        cp = next;
                    }
                }

                ListNode dp = dummyHead;
                while (pq.isEmpty() == false) {
                    dp.next = pq.poll();
                    dp = dp.next;
                }

                return dummyHead.next;
            }
        }
 https://leetcode.com/problems/merge-k-sorted-lists/submissions/954331006/
 
