5. Longest Palindromic Substring(Medium): Given a string s, return the longest palindromic substring in s.
    class Solution {
        public String longestPalindrome(String s) {
            String m ="";
            int longest = 0;
            for(int i=0;i<s.length();i++){
             // odd length
                int left =i;
                int right = i;
                while(left>=0 && right<s.length() && s.charAt(left)== s.charAt(right)){
                   if(right-left +1 > longest){
                       longest = right-left+1;
                       m = s.substring(left,right+1);
                   }
                    left--;
                    right++;
                }
            // even length
                left = i;
                right = i+1;
                  while(left>=0 && right<s.length() && s.charAt(left)== s.charAt(right)){
                   if(right-left +1 > longest){
                       longest = right-left+1;
                       m = s.substring(left,right+1);
                   }
                    left--;
                    right++;
                }
            }
            return m;
        }
    }
https://leetcode.com/problems/longest-palindromic-substring/submissions/953165656/

7. Reverse Integer(Medium): Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
        class Solution {
            public int reverse(int x) {
                int reverse=0;
                while(x != 0)   
                {  
                    int remainder = x % 10;  
                    reverse = reverse * 10 + remainder;  
                    x = x/10;  
                }  
                return reverse;
            }
        }
        
This test-values have invalid test cases for x:
1534236469, 1563847412 and -1563847412
Because all these numbers are within the required range [-2^31 ; 2^31 -1] 

21. Merge Two Sorted Lists(Easy):You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.
 
        class Solution {
            public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
                if(list1!=null && list2!=null){
                if(list1.val<list2.val){
                    list1.next=mergeTwoLists(list1.next,list2);
                    return list1;
                    }
                    else{
                        list2.next=mergeTwoLists(list1,list2.next);
                        return list2;
                }
                }
                if(list1==null)
                    return list2;
                return list1;
            }
        }
        
https://leetcode.com/problems/merge-two-sorted-lists/submissions/953330349/
27. Remove Element(Easy):Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
Return k.

        class Solution {
            public int removeElement(int[] nums, int val) {
                int i=0;
                int j=0;
                while(j < nums.length)
                {
                    if(nums[j] != val)
                    {
                        nums[i] = nums[j];
                        i++;
                    }
                    j++;
                }
                return i;
            }
        }
        
https://leetcode.com/problems/remove-element/submissions/953333337/
