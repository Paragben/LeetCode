Please refer the following questio

1. TWO SUM(Easy):Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.

      class Solution {
          public int[] twoSum(int[] nums, int target) {
              int N=nums.length;
              int[] A= new int[2];
              for(int s=0; s<N;s++){
                  for(int k=s+1;k<N;k++){
                      int sum=nums[s]+nums[k];
                      if(sum==target){
                          A[0]=s;
                          A[1]=k;
                          return A;
                      }
                  }
              }
              return A;
          }
      }
      
Link to access my Solution:
https://leetcode.com/problems/two-sum/submissions/951895790/

9. Palindrome Number(Easy): Given an integer x, return true if x is a palindrome, and false otherwise.

      class Solution {
          public boolean isPalindrome(int x) {
              int temp=x;
              int r,t=0;
              while(x>0){
                  r=x%10;
                  t=t*10+r;
                  x=x/10;
              }
              if(temp==t){
                  return true;
              }
          return false;
          }
      }
      
Link to access my Solution:
https://leetcode.com/problems/palindrome-number/submissions/951921494/ 

21. Merge Two Sorted Lists(Easy):You are given the heads of two sorted linked lists list1 and list2. Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.
 
        class Solution {
            public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
                if(list1!=null && list2!=null){
                if(list1.val<list2.val){
                    list1.next=mergeTwoLists(list1.next,list2);
                    return list1;
                    }
                    else{
                        list2.next=mergeTwoLists(list1,list2.next);
                        return list2;
                }
                }
                if(list1==null)
                    return list2;
                return list1;
            }
        }
        
https://leetcode.com/problems/merge-two-sorted-lists/submissions/953330349/

27. Remove Element(Easy):Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
Return k.

        class Solution {
            public int removeElement(int[] nums, int val) {
                int i=0;
                int j=0;
                while(j < nums.length)
                {
                    if(nums[j] != val)
                    {
                        nums[i] = nums[j];
                        i++;
                    }
                    j++;
                }
                return i;
            }
        }
        
https://leetcode.com/problems/remove-element/submissions/953333337/


